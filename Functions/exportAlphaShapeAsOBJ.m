function [fileout] = exportAlphaShapeAsOBJ(shp,framenumber,fileout)
% Export alpha shape as obj. Written by J.D. Laurence-Chasen
% 
% Adpated from code by Ariel Camp and Peter Falkingham. 
%
% Input shp = matlab alpha shape
%       framenumber = frame number to print in file, use 0 or 1 if none is
%       needed
%       fileout = file name

[bf,P] = boundaryFacets(shp); %facets that make up the boundary of the alpha shape
totalvol = volume(shp);

%Export alphaShape as .obj file (adapted from From Bill's "calculate_convex_hull.m"):
fout = fopen(fileout, 'w');
fprintf(fout, '# alpha shape generated by matlab alphaShape\n');
fprintf(fout, '%g\n', totalvol);
fprintf(fout, '%g\n', (framenumber));

%From Bill's "calculate_convex_hull.m":
group = strrep(fileout(1:end-4), ' ', '_');
fprintf(fout, 'g %s\n', group);
fprintf(fout, 'o %s\n', group);

% vertices first
[r, l] = size(bf);%r = total number of rows; l= total number of columns
vertex_list = [];%creates empty variable named "vertex_list"
for i = 1: r %for each row...
    for j = 1: l %for each column...
    vertex = bf(i, j); %index of a single vertex coordinate
    index = find(vertex_list == vertex);
        if (isempty(index))
            vertex_list(end + 1) = vertex;%only contains unique vertex coordinates
            fprintf(fout, 'v %.10f %.10f %.10f\n', P(vertex,1), P(vertex,2), P(vertex,3));
        end
    end
end

% now faces
use_relative = 1;
for i = 1: r
    fprintf(fout, 'f');
    for j = 1: l
        vertex = bf(i, j);
        index = find(vertex_list == vertex);        
        if (isempty(index))
            disp('Error finding vertex')
            exit;
        else
            if (use_relative == 0)
        % using the absolute indexing system
                fprintf(fout, ' %d', index(1));
            else
        % using the slightly more complex relative format
                fprintf(fout, ' %d', index(1) - length(vertex_list) - 1);
            end
        end
    end
    fprintf(fout, '\n');
end
fclose(fout);

end

